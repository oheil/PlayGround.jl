precompile(Tuple{typeof(PlayGround.include), String})
precompile(Tuple{typeof(PlayGround.World.include), String})
precompile(Tuple{typeof(Base._iterate), Base.Dict{Int32, Symbol}, Int64})
precompile(Tuple{Type{PlayGround.World.ResourceName}, Int32})
precompile(Tuple{typeof(RuntimeGeneratedFunctions.init), Module})
precompile(Tuple{typeof(Base.lock), RuntimeGeneratedFunctions.var"#7#8"{Module}, Base.Threads.SpinLock})
precompile(Tuple{typeof(PlayGround.World.eval), Expr})
precompile(Tuple{Type{PlayGround.World.OperatorType}, Int32})
precompile(Tuple{Type{PlayGround.World.Operator}, Symbol, PlayGround.World.OperatorType})
precompile(Tuple{typeof(Base.vect), PlayGround.World.Operator, Vararg{PlayGround.World.Operator, N} where N})
precompile(Tuple{typeof(Base.vect), Array{PlayGround.World.Operator, 1}, Vararg{Array{PlayGround.World.Operator, 1}, N} where N})
precompile(Tuple{typeof(Base.allocatedinline), Type{PlayGround.World.Operator}})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Array{Array{PlayGround.World.Operator, 1}, 1}})
precompile(Tuple{RuntimeGeneratedFunctions.var"#@RuntimeGeneratedFunction", LineNumberNode, Module, Any})
precompile(Tuple{typeof(RuntimeGeneratedFunctions._RGF_constructor_code), Expr, Expr})
precompile(Tuple{typeof(GLFW_jll.__init__)})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Libdl.dlopen), String, UInt32})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(GLFW._ErrorCallbackWrapper), Int32, Base.Cstring})
precompile(Tuple{typeof(GLFW.__init__)})
precompile(Tuple{typeof(CImGui_jll.__init__)})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(Base.filter!), Base.var"#64#65"{typeof(Base.isempty)}, Array{String, 1}})
precompile(Tuple{typeof(Base.join), Array{String, 1}, Char})
precompile(Tuple{typeof(CImGui.GLFWBackend.__init__)})
precompile(Tuple{typeof(CImPlot_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), CImPlot_jll.var"#7#9", Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), CImPlot_jll.var"#8#10", Tuple{Array{String, 1}}})
precompile(Tuple{typeof(GLFW.WindowHint), UInt32, Int64})
precompile(Tuple{typeof(GLFW.WindowHint), UInt32, UInt32})
precompile(Tuple{typeof(Base.join), Tuple{Symbol, Symbol, Symbol}, String})
precompile(Tuple{Base.var"##sprint#355", Nothing, Int64, typeof(Base.sprint), Function, Tuple{Symbol, Symbol, Symbol}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol, Symbol}, String})
precompile(Tuple{typeof(GLFW.SetErrorCallback), Function})
precompile(Tuple{Type{PlayGround.World.GlyphRange}, UInt16, UInt16})
precompile(Tuple{typeof(CImGui.LibCImGui.ImFontConfig_ImFontConfig)})
precompile(Tuple{typeof(Base.tail), Tuple{String, Expr, Expr}})
precompile(Tuple{typeof(Printf._printf), String, Expr, String, Tuple{Expr, Expr}})
precompile(Tuple{typeof(Printf.gen_e), String, Int64, Int64, Char})
precompile(Tuple{typeof(Base.tail), Tuple{String, Symbol, Symbol}})
precompile(Tuple{typeof(Printf._printf), String, Expr, String, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Printf._printf), String, Expr, String, Tuple{}})
precompile(Tuple{Type{PlayGround.World.StateFloatIndices}, Int32})
precompile(Tuple{Type{PlayGround.World.StateIntIndices}, Int32})
precompile(Tuple{Base.var"#@ccallable", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.expand_ccallable), Nothing, Expr})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#283#284", Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, Base.var"#283#284"}})
precompile(Tuple{typeof(Base._ccallable), Type{T} where T, Type{T} where T})
precompile(Tuple{typeof(GLFW.Terminate)})
